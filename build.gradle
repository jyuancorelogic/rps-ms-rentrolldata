buildscript {
    ext {
        springBootVersion = '2.0.1.RELEASE'
		liquibasepluginVersion = '1.2.4'
        dockerPluginVersion = '1.2'
        db2jccDriverVersion = '10.1'
    }
    repositories {
    	jcenter()
        mavenCentral()
        maven {
            url "https://repo.corelogic.net/nexus/content/repositories/m2/"
        }

    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("se.transmode.gradle:gradle-docker:${dockerPluginVersion}")
 		classpath "org.liquibase:liquibase-gradle-plugin:${liquibasepluginVersion}"
        classpath "com.ibm.db2.jcc:db2jcc4:${db2jccDriverVersion}"
		classpath 'no.nils:wsdl2java:0.10'        
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'docker'
apply plugin: 'org.liquibase.gradle'
apply plugin: 'jacoco'
apply plugin :'no.nils.wsdl2java'

group = 'com.corelogic.rps'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url "https://repo.corelogic.net/nexus/content/repositories/m2/"
    }
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

ext {
    wiremock = '2.11.0'
    checkstyleSevntu = '1.24.2'
    swagger = '2.8.0'
    db2jccDriverVersion = '10.1'
    db2DriverVersion = '9.4'
    msSqlDriverVersion = '4.0'
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")  
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework.boot:spring-boot-starter-tomcat")   
    compile("io.springfox:springfox-swagger2:${swagger}")
    compile("io.springfox:springfox-swagger-ui:${swagger}")
    compile("com.gemstone.gemfire:gemfire:8.2.4")
    compile ("com.ancientprogramming.fixedformat4j:fixedformat4j:1.2.2")  
    compile ("cglib:cglib-nodep:3.1")
    compile ("org.springframework:spring-aspects:5.1.4.RELEASE")  
    compile ("org.springframework:spring-aspects:5.1.4.RELEASE") 
     compile("com.microsoft.sqlserver:sqljdbc4:${msSqlDriverVersion}") 
    annotationProcessor("org.projectlombok:lombok:1.16.20")
    compileOnly("org.projectlombok:lombok:1.16.20")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.mockito:mockito-core:2.18.3")
    testCompile("com.h2database:h2:1.0.60")
    checkstyle("com.github.sevntu-checkstyle:sevntu-checks:${checkstyleSevntu}")
    runtime("org.springframework.boot:spring-boot-properties-migrator")
      

}

wsdl2java{

 wsdlsToGenerate = [
            ['-p','com.corelogic.rps.rentrolldata.amsi.generated', '-autoNameResolution',"$projectDir/src/main/resources/wsdl/leasing.wsdl"], ['-p','com.corelogic.rps.rentrolldata.yardi.generated', '-autoNameResolution',"$projectDir/src/main/resources/wsdl/ItfRentersinsurance.wsdl"]
    ]
     generatedWsdlDir = file("$projectDir/src/main/java/")
     wsdlDir = file("$projectDir/src/main/resources/wsdl")
     locale = Locale.US
}


wsdl2javaExt {
    cxfVersion = "2.5.1"
}

pmd {
ignoreFailures=true
    ruleSetFiles = files("config/pmd/pmd-ruleset.xml")
}

findbugs {
ignoreFailures=true
    excludeFilter = file("config/findbugs/excludeFilter.xml")
}

tasks.withType(Checkstyle) {
exclude '**/generated/**'
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

tasks.withType(FindBugs) {
exclude '**/generated/**'
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.7'
}

tasks.withType(Pmd) {
    exclude '**/generated/**'
}

sourceSets {
    itest {
        java.srcDir 'src/itest/java'
        resources.srcDir 'src/itest/resources'
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    itestCompile.extendsFrom testCompile
    itestRuntime.extendsFrom testRuntime
}


task itest(type: Test, dependsOn: update) {
    group 'Verification'
    description 'Runs the integration tests'
    testClassesDirs = sourceSets.itest.output.classesDirs
    classpath = sourceSets.itest.runtimeClasspath
}

// Jacoco section

jacoco {
    toolVersion = "0.8.1"
}

/*itest.finalizedBy(project.tasks.jacocoTestReport)

def jacocoTestFiles = ["$buildDir/jacoco/test.exec", "$buildDir/jacoco/itest.exec"]
jacocoTestReport.dependsOn(project.tasks.test, project.tasks.itest)
jacocoTestReport.executionData(jacocoTestFiles) */

if (project.hasProperty("skipall")) {
    gradle.startParameter.excludedTaskNames += "test"
    gradle.startParameter.excludedTaskNames += "findbugsMain"
    gradle.startParameter.excludedTaskNames += "findbugsTest"
    gradle.startParameter.excludedTaskNames += "pmdItest"
    gradle.startParameter.excludedTaskNames += "pmdMain"
    gradle.startParameter.excludedTaskNames += "pmdTest"
    gradle.startParameter.excludedTaskNames += "checkstyleItes"
    gradle.startParameter.excludedTaskNames += "checkstyleMain"
    gradle.startParameter.excludedTaskNames += "checkstyleTest"
    gradle.startParameter.excludedTaskNames += "compileItestJava"
    gradle.startParameter.excludedTaskNames += "compileTestJava"

}